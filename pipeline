#!/usr/bin/env bash

#######################################################
#Main modlue for hand track video pipeline.
#Written bt Daniel Hanuska
#Freiwald Lab
#07/08/2024
#######################################################

help_message () {
	echo ""
	echo "Hand Track Pipeline"
	echo "Usage: pipeline [module] [options]"
	echo ""
	echo "Modules:"
	echo "	env-setup	Sets up the necessary conda environments, ensure you do not have environments named '_drawcamera' or '_dlc'"
	echo "	init		Initialize directories and metadata (will automatically gen metadata but check to make sure its how you want)"
	echo "	checkerb	Checkerboard calibration"
	echo "	dlc-setup	Set up for DLC train/analyze module"
	echo "	train		DLC train module (must run dlc-setup first). Will also analyze videos."
	echo "	analyze		Only run analysis steps, do not need to train. Must run dlc-setup first."
	echo "	campy		Extract campy data"
	echo "	wand		Wand clibration/3D grid stuff/easyWand"
	echo "Helper Scripts:"
	echo "	rename		Script to fully rename an initialized experiment (e.g. if behavior and cam name don't match)"
	echo ""
	echo "See /pipeline-modules for module code"
	echo "See /pipeline-scripts for some useful little scripts"
	echo "See /setup for a majority of the source code"
	echo "Don't contact me with issues"
	echo ""
}

this_dir="$(dirname "$0")"
config_file=${this_dir}/config
source $config_file
echo "Ensure the config file is updated with the path of this directory"
if [[ $? -ne 0 ]]; then 
	echo "no config file."
	exit 1
fi

# Make sure globals.py is proper

if [ -f "${pyvm}/globals.py" ]; then
	rm ${pyvm}/globals.py
fi

if [ ! -d "${data_dir}/${animal}" ]; then
	echo "###### ERROR"
	echo "Base data directory ${data_dir}/${animal} is not found please update the config file with the proper directory"
	exit 1
fi

if [ ! -d "${pyvm}" ]; then
	echo "###### ERROR"
	echo "pyvm directory ${pyvm} is not found. Please update the config file with the proper pyvm directory (i.e. update pipe_path with the current directory of this pipeline)"
	exit 1
fi

if [ ! -d "${server_dir}" ]; then
	echo "###### ERROR"
	echo "Server mount not found at ${server_dir}, check server is actually mounted and that dir config file is correct"
	exit 1
fi

echo -e "from pythonlib.globals import MACHINE\nBASEDIR = '${data_dir}'\nPYVM_DIR = '${pyvm}'\nWINDOWS = False\nNCAMS=${NCAMS}\nCB_DIR='${checkb_dir}'" >> ${pyvm}/globals.py

comm () { ${pipe_path}/pipeline_scripts/print_comment.py "$1" "-"; }

if [ "$1" = env-setup ]; then
	echo pipeline env-setup ${@:2}
	time ${pipe_path}/pipeline-modules/env-setup.sh ${@:2}
elif [ "$1" = init ]; then
    echo pipeline intializer ${@:2}
    time ${pipe_path}/pipeline-modules/init.sh ${@:2}
elif [ "$1" = checkerb ]; then
	echo pipeline checkerboard calibration ${@:2}
	time ${pipe_path}/pipeline-modules/checkerb.sh ${@:2}
elif [ "$1" = dlc-setup ]; then
    echo dlc training setup ${@:2}
    time ${pipe_path}/pipeline-modules/dlc-setup.sh ${@:2}
elif [ "$1" = train ]; then
    echo dlc train ${@:2}
	time ${pipe_path}/pipeline-modules/train.sh ${@:2}
# elif [ "$1" = campy ]; then
# 	echo "Don't use this module, use wand step 4/5 instead"
# 	exit 1
#     echo model evaluation ${@:2}
	# time ${pipe_path}/pipeline-modules/campy.sh ${@:2}
elif [ "$1" = wand ]; then
	echo wand and 3d coords ${@:2}
	time ${pipe_path}/pipeline-modules/wand.sh ${@:2}
elif [ "$1" = analyze ]; then
	echo model evaluation ${@:2}
	time ${pipe_path}/pipeline-modules/analyze.sh ${@:2}
elif [ "$1" = rename ]; then
	time ${pipe_path}/pipeline-scripts/rename_expt.sh ${@:2}
elif [ "$1" = evaluate ]; then
	echo "Evaluate this:"
	time ${pipe_path}/pipeline-modules/evaluate.sh
elif [ "$1" = lag ]; then
	echo "Evaluate this:"
	time ${pipe_path}/pipeline-modules/lag.sh
elif [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
	help_message
else
	echo "Please select a proper module, or get outta my house" &&
	help_message &&
	exit 1
fi

